map $sent_http_content_type $expires {
	default                    off;
	text/html                  epoch;
	text/css                   max;
	application/javascript     max;
	~image/                    max;
}

upstream matomo {
	server matomo-service-dockerbunker:80;
}

server {
	listen 80;
	server_name	${SERVICE_DOMAIN} www.${SERVICE_DOMAIN};

	# block request if it contains not the correct domain
	if ($host !~ ^(${SERVICE_DOMAIN}|www.${SERVICE_DOMAIN})$ ) {
		return 444;
	}

	# block request from Bots with folloging user-Agends
	if ($http_user_agent ~* (SemrushBot|MJ12Bot|DotBot|AspiegelBot|Bot|Googlebot)) {
		return 410;
	}

	return 301 https://$host$request_uri;
}

server {

	listen 443 ssl;
	server_name	${SERVICE_DOMAIN} www.${SERVICE_DOMAIN};

	ssl_certificate /etc/nginx/ssl/${SERVICE_DOMAIN}/cert.pem;
	ssl_certificate_key /etc/nginx/ssl/${SERVICE_DOMAIN}/key.pem;
	include /etc/nginx/includes/ssl.conf;

	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header Host $http_host;

	include /etc/nginx/includes/gzip.conf;

	# block request if it contains not the correct domain
	if ($host !~ ^(${SERVICE_DOMAIN}|www.${SERVICE_DOMAIN})$ ) {
		return 444;
	}

	# block request from Bots with folloging user-Agends
	if ($http_user_agent ~* (SemrushBot|MJ12Bot|DotBot|AspiegelBot|Bot|Googlebot)) {
		return 410;
	}

	location / {
		proxy_pass http://matomo/;
	}

	expires $expires;

	location = /favicon.ico {
		log_not_found off;
		access_log off;
	}

	location ^~ /.well-known/ {
		access_log           off;
		log_not_found        off;
		root                 /var/www/html;
		#	    autoindex            off;
		index                index.html; # "no-such-file.txt",if expected protos don't need it
		try_files            $uri $uri/ =404;
	}
}
