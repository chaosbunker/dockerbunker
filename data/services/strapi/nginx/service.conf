# Default server configuration
#

upstream ${SERVICE_NAME}_website {
	server ${SERVICE_NAME}-service-dockerbunker:1337;
}

# redirect http to non-www https
server {
	listen [::]:80;
	listen 80;
	server_name	${SERVICE_DOMAIN} www.${SERVICE_DOMAIN};

	return 301 https://$host$request_uri;
}

# redirect www https to non-www https
server {
	listen 443 ssl;
	server_name	www.${SERVICE_DOMAIN};

	ssl_certificate /etc/nginx/ssl/${SERVICE_DOMAIN}/cert.pem;
	ssl_certificate_key /etc/nginx/ssl/${SERVICE_DOMAIN}/key.pem;
	include /etc/nginx/includes/ssl.conf;

	return 302 https://${SERVICE_DOMAIN};
}

# serve website
server {
	listen 443 ssl;
	server_name	${SERVICE_DOMAIN};

	ssl_certificate /etc/nginx/ssl/${SERVICE_DOMAIN}/cert.pem;
	ssl_certificate_key /etc/nginx/ssl/${SERVICE_DOMAIN}/key.pem;
	include /etc/nginx/includes/ssl.conf;

	# tell browsers that it should only be accessed using HTTPS, instead of using HTTP.
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

	# block request if it contains not the correct domain
	if ($host !~ ^(${SERVICE_DOMAIN})$ ) {
		return 444;
	}

	# block request from Bots with folloging user-Agends
	if ($http_user_agent ~* (SemrushBot|MJ12Bot|DotBot|AspiegelBot|Bot|Googlebot)) {
		return 410;
	}

	location / {
		proxy_pass http://${SERVICE_NAME}_website/;

		proxy_set_header  Host              $http_host;   # required for docker client's sake
		proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
		proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
		proxy_set_header  X-Forwarded-Proto $scheme;
	}

	location ~ /.well-known {
		allow all;
		root /var/www/html;
	}
}
